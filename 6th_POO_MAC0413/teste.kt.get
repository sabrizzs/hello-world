import khttp.get
import khttp.post
import org.json.JSONObject

fun main() {
    val clientId = "SEU_CLIENT_ID"
    val clientSecret = "SEU_CLIENT_SECRET"
    val accessToken = getAccessToken(clientId, clientSecret)

    val artistName = "Nome do Artista"
    val trackName = "Nome da Música"
    
    val artistId = getArtistId(accessToken, artistName)
    val recommendations = getRecommendations(accessToken, artistId, trackName)

    println(recommendations)
}

fun getAccessToken(clientId: String, clientSecret: String): String {
    val response = post(
        "https://accounts.spotify.com/api/token",
        headers = mapOf("Authorization" to "Basic ${"$clientId:$clientSecret".toByteArray().toString(Charsets.UTF_8).toBase64()}"),
        params = mapOf("grant_type" to "client_credentials")
    )

    return JSONObject(response.text)["access_token"] as String
}

fun getArtistId(accessToken: String, artistName: String): String {
    val response = get(
        "https://api.spotify.com/v1/search",
        headers = mapOf("Authorization" to "Bearer $accessToken"),
        params = mapOf("q" to artistName, "type" to "artist")
    )

    val artists = JSONObject(response.text)["artists"] as JSONObject
    val items = artists["items"] as List<JSONObject>
    
    if (items.isNotEmpty()) {
        return items[0]["id"] as String
    } else {
        throw Exception("Artista não encontrado")
    }
}

fun getRecommendations(accessToken: String, artistId: String, trackName: String): List<String> {
    val response = get(
        "https://api.spotify.com/v1/recommendations",
        headers = mapOf("Authorization" to "Bearer $accessToken"),
        params = mapOf("seed_artists" to artistId, "seed_tracks" to trackName)
    )

    val tracks = JSONObject(response.text)["tracks"] as List<JSONObject>
    val recommendations = mutableListOf<String>()

    for (track in tracks) {
        recommendations.add(track["name"] as String)
    }

    return recommendations
}

fun String.toBase64(): String {
    return java.util.Base64.getEncoder().encodeToString(this.toByteArray())
}
