 case BASIC_PUBLISH:
                                    //received basic publish
                                    //send nothing
                                    char qName[MAX_QUEUE_SIZE];
                                    char payload[MAX_MESSAGE_SIZE];
                                    get_publish_data(connfd, recvline, frame_length, qName, payload);
                                    publish(qName, payload);
                                    break;

void get_publish_data(int connfd, char* recvline, uint32_t frame_length, char* qName, char* payload){
    read(connfd, recvline, frame_length-3);
    get_string(qName, recvline, 4, recvline[3]);
    read(connfd,recvline, 3); //content header type + channel
    read(connfd,recvline, 4); //content header lenght 4 hex bytes
    u_int32_t length = ntohl(*((u_int32_t*)recvline));
    read(connfd,recvline, length+1+3);
    read(connfd,recvline, 4);//content body length
    length = ntohl(*((u_int32_t*)recvline));
    read(connfd,recvline, length +1);
    get_string(payload,recvline,0, length);
    //payload[strlen(payload)-2] = 0;
    //printf("%s %d %s\n", qName, length, payload);
}

void get_string(char* s,char* recvline, int start, int strlen){
    int j = 0;
    for(int i = start; j < strlen; i++){
        s[j++] = recvline[i];
    }
    s[j] = '\0';
    //printf("    [+]get_string: %s %d\n", s, j);
}

void publish(char* queue_name, char* msg){
    int i;
    if((i = get_id(queue_name)) == -1){
        printf("    [-]publish: get_id(%s): queue not found\n", queue_name);
        return;
    }
    for(int j = 0; j < MAX_MESSAGE_NUMBER; j++){
        if(strcmp(queues_data.queue_messages[i][j],empty) == 0){
            memcpy(queues_data.queue_messages[i][j],msg,MAX_MESSAGE_SIZE);
            printf("    [+]publish: %s %d %d %s\n",queue_name, i, j, queues_data.queue_messages[i][j]);
            return;
        }
    }
}

int get_id(char* queue_name){
    for(int i = 0; i < MAX_QUEUE_SIZE;i++){
        if(strcmp(queues_data.queue_name[i], queue_name) == 0){
            //printf("    [+]get_id(%s): id = %d\n",queue_name, i);
            return i;
        }
    }
    return -1;
}


struct message{
    char data[MAXMESSAGESIZE];
    int consumers[MAXCONSUMERNUMBER];
    int numConsumers;
};

struct queue{
    char name[MAXQUEUENAMESIZE];
    struct message messages[MAXMESSAGENUMBER];
    int numMessages;
};

struct queues{
    struct queue queues[MAXQUEUESIZE];
    int numQueues;
};