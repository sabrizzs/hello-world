// javac-introcs Join.java
// java-introcs Join abcd abab

public class Join {
    // Compute length of LCS for all subproblems.
    public static String lcs(String x, String y) {
        int m = x.length(), n = y.length();
        int[][] opt = new int[m + 1][n + 1];
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (x.charAt(i) == y.charAt(j)) {
                    opt[i][j] = opt[i + 1][j + 1] + 1;
                } else {
                    opt[i][j] = Math.max(opt[i + 1][j], opt[i][j + 1]);
                }
            }
        }

        // Recover LCS itself.
        String lcs = "";
        int i = 0, j = 0;
        while (i < m && j < n) {
            if (x.charAt(i) == y.charAt(j)) {
                lcs += x.charAt(i);
                i++;
                j++;
            } else if (opt[i + 1][j] >= opt[i][j + 1]) i++;
            else j++;
        }
        return lcs;
    }

    public static void main(String[] args) {
        String lcs = lcs(args[0], args[1]);
        StdOut.println(lcs);

        String join;

        int arg0 = args[0].length();
        int arg1 = args[1].length();
        int llcs = lcs.length();
        int j = 1;
        int k = 0;

        for (int i = 0; i < arg0; i++) {
            if (args[0].charAt(i) == lcs.charAt(j - 1) && j < llcs) { // quero printar o lado esquerdo do args[1]

                //for (int k = 0; k < arg1; k++) {
                if (args[1].charAt(k) == lcs.charAt(j - 1) && k < arg1) {
                    StdOut.print("0" + args[1].charAt(k));
                    k++;
                    //break;
                } else {
                    StdOut.print("1" + args[1].charAt(k));
                }


                //StdOut.print(j);
                j++;
                //StdOut.print(j);
            } else {
                //StdOut.print("oi");
                StdOut.print(args[0].charAt(i));
            }
        }
        //}


    }

}